function ObjFcn = makeObjFcn(imdsTrain,imdsValidation)
ObjFcn = @valErrorFun;
    function [valError,cons,fileName] = valErrorFun(optVars)
        % load net
        numClasses = 4;
        net = resnet101;
        inputSize = net.Layers(1).InputSize;
        % Convert DAGNetwork object to LayerGraph object
        lgraph = layerGraph(net);
        % Replace the last few layers
        [learnableLayer,classLayer] = findLayersToReplace(lgraph);
        if isa(learnableLayer, 'nnet.cnn.layer.FullyConnectedLayer' )
            newLearnableLayer = fullyConnectedLayer(numClasses, ... 
                'Name' , 'new_fc' , ... 
                'WeightLearnRateFactor' ,20, ... 
                'BiasLearnRateFactor' ,20);
    
        elseif isa(learnableLayer, 'nnet.cnn.layer.Convolution2DLayer' )
            newLearnableLayer = convolution2dLayer(1,numClasses, ... 
                'Name' , 'new_conv' , ... 
                'WeightLearnRateFactor' ,20, ... 
                'BiasLearnRateFactor' ,20);
        end

        lgraph = replaceLayer(lgraph,learnableLayer.Name,newLearnableLayer);
        
        newClassLayer = classificationLayer( 'Name' , 'new_classoutput' );
        lgraph = replaceLayer(lgraph,classLayer.Name,newClassLayer);
        
        % Freeze first layers
        layers = lgraph.Layers;
        connections = lgraph.Connections;
        layers(1:10) = freezeWeights(layers(1:10));
        % Re-connect all the layers in the original order 
        % by using the support function createLgraphUsingConnections
        lgraph = createLgraphUsingConnections(layers,connections);
        % Data augmentation
        rotation = [-90,90];
        rescale = [1 2];
        imageAugmenter = imageDataAugmenter( ...
            'RandXReflection',true, ...
            'RandRotation',rotation, ...
            'RandScale',rescale);
        augimdsTrain = augmentedImageDatastore(inputSize(1:2),imdsTrain, ...
            'DataAugmentation',imageAugmenter);
        augimdsValidation = augmentedImageDatastore(inputSize(1:2),...
            imdsValidation);
        % Training options
        options = trainingOptions('sgdm', ...
            'MiniBatchSize',9, ...
            'MaxEpochs',30, ...
            'Momentum',optVars.Momentum, ...
            'InitialLearnRate',optVars.InitialLearnRate, ...
            'LearnRateSchedule','piecewise', ...
            'LearnRateDropPeriod',40, ...
            'LearnRateDropFactor',0.1, ...
            'Shuffle','every-epoch', ...
            'ValidationData',augimdsValidation, ...
            'L2Regularization',optVars.L2Regularization, ...
            'ValidationFrequency',183, ...
            'Verbose',false, ...
            'Plots','training-progress');
        netTransfer = trainNetwork(augimdsTrain,lgraph,options);
        close(findall(groot,'Tag','NNET_CNN_TRAININGPLOT_UIFIGURE'))
        [YPred,~] = classify(netTransfer,augimdsValidation);
        YValidation = imdsValidation.Labels;
        valError = 1 - mean(YPred == YValidation);
        fileName = num2str(valError) + ".mat";
        save(fileName,'netTransfer','valError','options')
        cons = [];
        
    end
end
